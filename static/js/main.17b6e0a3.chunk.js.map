{"version":3,"sources":["components/Errors/UnknownPath.jsx","components/Main/Main.jsx","App.js","serviceWorker.js","index.js"],"names":["UnknownPath","className","src","alt","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","main_body_section","marginTop","justifyContent","display","main_img_container","position","width","main_intro_text","top","main_intro_img","Main","classes","React","useState","anchorEl","setAnchorEl","open","Boolean","handleClose","AppBar","Toolbar","IconButton","edge","color","aria-label","Typography","variant","aria-controls","aria-haspopup","onClick","event","currentTarget","id","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","MenuItem","App","exact","path","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0TAYeA,G,MATK,WAChB,OACE,yBAAKC,UAAU,uBACV,yBAAKC,IAAI,sCAAsCC,IAAI,cACnD,iF,kGCKLC,G,MAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,SAAU,GAEdC,WAAY,CACRC,YAAaJ,EAAMK,QAAQ,IAE/BC,MAAO,CACHJ,SAAU,GAEdK,kBAAmB,CACfC,UAAW,KACXC,eAAgB,SAChBC,QAAS,QAEbC,mBAAoB,CAACC,SAAU,WAAYF,QAAS,OAAQD,eAAgB,SAAUI,MAAO,OAC7FC,gBAAiB,CAAEF,SAAU,WAAYG,IAAK,OAC9CC,eAAgB,CACZH,MAAO,aAIA,SAASI,IACpB,IAAMC,EAAUpB,IADW,EAGKqB,IAAMC,SAAS,MAHpB,mBAGpBC,EAHoB,KAGVC,EAHU,KAIrBC,EAAOC,QAAQH,GAMfI,EAAc,WAChBH,EAAY,OAGhB,OACI,yBAAK3B,UAAWuB,EAAQjB,MACpB,kBAACyB,EAAA,EAAD,CAAQd,SAAS,UACb,kBAACe,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQlC,UAAWuB,EAAQf,WAAY2B,MAAM,UAAUC,aAAW,QAC/E,kBAAC,IAAD,OAEJ,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKtC,UAAWuB,EAAQZ,OAA5C,mBAII,6BACI,kBAACsB,EAAA,EAAD,CACIG,aAAW,0BACXG,gBAAc,cACdC,gBAAc,OACdC,QAxBT,SAAAC,GACff,EAAYe,EAAMC,gBAwBMR,MAAM,WAEN,kBAAC,IAAD,OAEJ,kBAAC,IAAD,CACIS,GAAG,cACHlB,SAAUA,EACVmB,aAAc,CACVC,SAAU,MACVC,WAAY,SAEhBC,aAAW,EACXC,gBAAiB,CACbH,SAAU,MACVC,WAAY,SAEhBnB,KAAMA,EACNsB,QAASpB,GAET,kBAACqB,EAAA,EAAD,CAAUV,QAASX,GAAnB,WACA,kBAACqB,EAAA,EAAD,CAAUV,QAASX,GAAnB,kBAMpB,6BAAS9B,UAAWuB,EAAQX,mBACxB,yBAAKgC,GAAG,yBAAyB5C,UAAWuB,EAAQP,oBAChD,yBAAK4B,GAAG,iBAAiB5C,UAAWuB,EAAQF,eAAgBpB,IAAI,uCAAuCC,IAAI,mBAC3G,wBAAIF,UAAWuB,EAAQJ,iBAAvB,6DCrELiC,MAff,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,KACnB,kBAAChC,EAAD,OAEA,kBAAC,IAAD,CAAQgC,KAAM,KACd,kBAAC,EAAD,UCNYzB,QACW,cAA7B0B,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.17b6e0a3.chunk.js","sourcesContent":["import React from 'react';\nimport \"./errors.css\"\n\nconst UnknownPath = () => {\n    return (\n      <div className=\"page_not_Found_main\">\n           <img src=\"imgs/undraw_page_not_found_su7k.svg\" alt=\"wrongPage\" />\n           <h2>OUPS ! La page que tu recherche n'existe pas !</h2>\n      </div>\n    );\n}\n\nexport default UnknownPath;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\nimport \"./main.css\"\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n    main_body_section: {\n        marginTop: \"5%\",\n        justifyContent: \"center\",\n        display: \"flex\"\n    },\n    main_img_container: {position: \"relative\", display: \"flex\", justifyContent: \"center\", width: \"30%\" },\n    main_intro_text: { position: \"absolute\", top: \"25%\" },\n    main_intro_img: {\n        width: \"100%\"\n    }\n}));\n\nexport default function Main() {\n    const classes = useStyles();\n    const auth = true\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const open = Boolean(anchorEl);\n    \n    const handleMenu = event => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        My contribution\n          </Typography>\n                    {auth && (\n                        <div>\n                            <IconButton\n                                aria-label=\"account of current user\"\n                                aria-controls=\"menu-appbar\"\n                                aria-haspopup=\"true\"\n                                onClick={handleMenu}\n                                color=\"inherit\"\n                            >\n                                <AccountCircle />\n                            </IconButton>\n                            <Menu\n                                id=\"menu-appbar\"\n                                anchorEl={anchorEl}\n                                anchorOrigin={{\n                                    vertical: 'top',\n                                    horizontal: 'right',\n                                }}\n                                keepMounted\n                                transformOrigin={{\n                                    vertical: 'top',\n                                    horizontal: 'right',\n                                }}\n                                open={open}\n                                onClose={handleClose}\n                            >\n                                <MenuItem onClick={handleClose}>Profile</MenuItem>\n                                <MenuItem onClick={handleClose}>My account</MenuItem>\n                            </Menu>\n                        </div>\n                    )}\n                </Toolbar>\n            </AppBar>\n            <section className={classes.main_body_section}>\n                <div id=\"main_div_img_container\" className={classes.main_img_container}>\n                    <img id=\"main_intro_img\" className={classes.main_intro_img} src=\"imgs/undraw_version_control_9bpv.svg\" alt=\"versioning-img\" />\n                    <h2 className={classes.main_intro_text}>Ne cherchez plus de projets, vous venez de les trouver</h2>\n                </div>\n            </section>\n        </div>);\n}","import React from 'react';\nimport './App.css';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport UnknownPath from './components/Errors/UnknownPath';\nimport Main from './components/Main/Main';\n\nfunction App() {\n  return (\n    <Router  >\n      <Switch>\n        <Route exact path={\"/\"}>\n        <Main />\n        </Route>\n        <Route  path={\"*\"}>\n        <UnknownPath />\n        </Route>\n      </Switch>\n  </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}